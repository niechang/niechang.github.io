{"text":"###创建型模式\n创建型模式抽象了实例化过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。一个**类创建型模式**使用继承改变被实例化的类，而一个**对象创建型模式**将实例化委托给另一个对象。随着系统演化得越来越依赖于对象复合而不是类继承，创建型模式变得更为重要，创建型模式两个主旋律：\n- 它们都将关于该系统使用哪些具体的类的信息封装起来\n- 它们隐藏了这些类的实例是如何被创建和放在一起的\n\n###工厂方法模式\n**意图**：定义一个创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类。(类创建模式)\n**动机**：框架使用抽象类定义和维护对象之间的关系。这些对象的创建通常也由框架负责。\n**适用性**\n- 当一个类不知道它所必须创建的对象的类的时候\n- 当一个类希望由它的子类来指定它所创建的对象的时候\n- 当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。\n\n**结构**\n![Alt text](http://img.blog.csdn.net/20141120162001171)\n\n- Product：定义了工厂方法所创建对象的接口\n- ConcreteProduct：实现Product接口\n- Creator：声明工厂方法，返回一个Product对象\n- ConcreteCreator：重定义工厂方法以返回一个ConcreteProduct\n\n**协作**：Creator依赖于它的子类来定义工厂方法，所以它返回一个适当的ConcreteProduct实例。\n\n**缺陷**：工厂方法的一个潜在缺点在于客户可能仅仅为了创建一个特定的ConcreteProduct对象，就不得不创建Creator的子类。当Creator子类不必需时，客户现在必然要处理类演化的其他方面；但是当客户无论如何必须创建Creator的子类时，创建子类也是可行的。\n\n**实现**\n- Creator可以是抽象类或接口，也可以是具体类提供默认工厂方法实现\n- Parameterized factory methods：工厂方法通过参数来判断创建哪一种对象产品\n- parallel factory methods：一组创建不同类型产品的方法，通过方法签名来区分\n- Connects parallel class hierarchies：一组层次化的产品可以通过相应层次化的工厂来创建对应相同层次的产品对象\n\n###工厂方法模式的变种\n1. **简单工厂模式：抽象的工厂类省略，通过一系列静态方法提供创建相应的产品。**JDK中实例：Executors提供静态方法来创建不同类型的线程池。\n![简单工厂模式](http://img.itc.cn/photo/jttebhoBjWd)\n2. **省略抽象工厂和产品**，例如产品之间是没有联系的\n3. **产品本身包含工厂方法来创建自己**，例如java.text.DateFormat，DateFormat是一个抽象类，提供工厂方法返回的实例是其子类SimpleDateFormat。这种在JDK中比较常见，(抽象)父类中提供创建子类的工厂方法。\n![Alt text](http://img.itc.cn/photo/jttdGrPV0DW)\n4. **具体产品本身创建自己如Singleton模式**\n5. **带有注册实例的工厂用于复用对象实例**\n    - Factory存储并创建对象实例于注册的对象池中;\n    - 若需要可以重用已经注册的对象\n    - 更进一步，对象不仅仅可以通过new方式创建，也可以从其他资源如数据库等(JDBC,JNDI和EJB)\n\n###JDK中Factory Method模式\n- recognizeable by creational methods returning an implementation of an abstract/interface type\n    - java.util.Calendar#getInstance()：变种3，产品本身包含工厂方法，返回子类GregorianCalendar或其他\n    - java.util.ResourceBundle#getBundle()：变种3和5，采用了pool技术\n    - java.text.NumberFormat#getInstance()：变种3，返回子类DecimalFormat实例\n    - java.nio.charset.Charset#forName()\n    - java.net.URLStreamHandlerFactory#createURLStreamHandler(String) (Returns singleton object per protocol)\n- java.util.Collection#iterator is a good example of a Factory Method. Depending on the concrete subclass of Collection you use, it will create an Iterator implementation. \n\n"}