{"text":"###代理模式\n**意图**：为其他对象提供一种代理以控制对这个对象的访问。\n\n**动机**：对一个对象进行访问控制的一个原因是为了只有在我们确实需要这个对象时才对它进行创建和初始化。这一限制条件意味着，对于每一个开销很大的对象，应该根据需要进行创建，当一个图像变为可见时会产生这样的需要。\n\n**适用性**：在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。\n\n- 远程代理( Remote Proxy )：为一个对象在不同的地址空间 提供局部代表。\n- 虚代理(Virtual Proxy)：根据需要创建开销很大的对象。\n- 保护代理( Protection Proxy)：控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。\n- 智能指引(Smart Reference)：取代了简单的指针，它在访问对象时执行一些附加操作。典型用途包括：\n  - 对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它\n  - 当第一次引用一个持久对象时，将它装入内存\n  - 在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它\n- Copy-on-Write：仅当客户确实需要的时候才拷贝一份real object\n- Cache Proxy：为real objects提供缓存空间，客户可以存储和共享更多结果\n- Firewall Proxy：过滤掉恶意的请求和数据\n- Synchronized Proxy：提供线程安全的方式访问real object\n\n**结构**：\n![enter image description here][1]\n\n**参与者**：\n\n- Proxy：保存一个引用使得代理可以访问实体。提供一个与 S u b j e c t的接口相同的接口，这样代理就可以用来替代实体。控制对实体的存取，并可能负责创建和删除它。\n  - Remote Proxy负责对请求及其参数进行编码，并向不同地址空间中的实体发送已编码的请求。\n  - Vi rtual Proxy可以缓存实体的附加信息，以便延迟对它的访问。\n  - Protection Proxy检查调用者是否具有实现一个请求所必需的访问权限。\n- Subject：定义RealSubject 和Proxy的共用接口，这样就在任何使用 RealSubject的地方都可以使用Proxy。\n- RealSubject：定义Proxy所代表的实体\n\n**协作**：代理根据其种类，在适当的时候向RealSubject转发请求\n\n**效果**：Proxy模式在访问对象时引入了一定程度的间接性。根据代理的类型，附加的间接性有多种用途。\n\n- Remote Proxy可以隐藏一个对象存在于不同地址空间的事实\n- Virtual Proxy 可以进行最优化，例如根据要求创建对象\n- Protection Proxies和 Smart Reference都允许在访问一个对象时有一些附加的内务处理\nProxy模式还可以对用户隐藏另一种称之为copy-on-write的优化方式，该优化与根据需要创建对象有关\n\n###JDK中Proxy实例\n\n- java.lang.reflect.Proxy\n- java.rmi.*, the whole API actually.\n\n [1]: http://img.itc.cn/photo/j3xCswmKP8X"}